{
  "parser": "@typescript-eslint/parser",
  "extends": [
    "react-app",
    "plugin:jest/recommended",
    "plugin:promise/recommended"
  ],
  "plugins": ["prettier"],
  "rules": {
    "default-case": "error",
    "eqeqeq": "error",
    "generator-star-spacing": ["error", { "before": false, "after": true }],
    "jsx-a11y/aria-role": "error",
    "max-lines": ["warn", { "max": 300, "skipComments": true }],
    "no-console": "warn",
    "no-const-assign": "error",
    "no-else-return": "error",
    "no-implicit-coercion": ["error", { "allow": ["!!"] }],
    "no-unreachable": "error",
    "padding-line-between-statements": [
      "error",
      { "blankLine": "always", "prev": "*", "next": "block-like" },
      { "blankLine": "always", "prev": "block-like", "next": "*" },
      { "blankLine": "always", "prev": "*", "next": "if" },
      { "blankLine": "always", "prev": "if", "next": "*" },
      { "blankLine": "always", "prev": "*", "next": "switch" },
      { "blankLine": "always", "prev": "*", "next": "try" },
      { "blankLine": "always", "prev": "*", "next": "return" },
      { "blankLine": "always", "prev": "*", "next": "case" },
      { "blankLine": "always", "prev": "*", "next": "class" },
      { "blankLine": "always", "prev": "multiline-const", "next": "*" }
    ],
    "prefer-arrow-callback": "error",
    "prefer-const": "error",
    "require-await": "error",
    "require-yield": "error",
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/naming-convention": [
      "warn",
      { "selector": "default", "format": ["camelCase"] },
      { "selector": "variableLike", "format": ["camelCase", "PascalCase"] },
      {
        "selector": "variable",
        "format": ["camelCase", "UPPER_CASE", "PascalCase"]
      },
      {
        "selector": "parameter",
        "format": ["camelCase"],
        "leadingUnderscore": "allow"
      },
      { "selector": "memberLike", "format": ["camelCase"] },
      {
        "selector": "memberLike",
        "modifiers": ["private"],
        "format": ["camelCase"],
        "leadingUnderscore": "require"
      },
      { "selector": "typeLike", "format": ["PascalCase"] },
      { "selector": "enum", "format": ["UPPER_CASE"] },
      { "selector": "enumMember", "format": ["UPPER_CASE"] },
      {
        "selector": "typeParameter",
        "format": ["PascalCase"]
      },
      {
        "selector": "interface",
        "format": ["PascalCase", "snake_case"]
      }
    ]
  }
}
